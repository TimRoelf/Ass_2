#radius = c(0.5,0.01),
keep.data = T)
som_model %>% summary()
som_grid <- somgrid(xdim = 6, ydim = 6, topo = "hexagonal")
set.seed(123)
som_model <- som(std_data, grid = som_grid,
rlen = 1000,
alpha = c(0.5,0.1),
#radius = c(0.5,0.01),
keep.data = T)
som_model %>% summary()
plot(som_model, type = "counts")
som_grid <- somgrid(xdim = 6, ydim = 5, topo = "hexagonal")
set.seed(123)
som_model <- som(std_data, grid = som_grid,
rlen = 1000,
alpha = c(0.5,0.1),
#radius = c(0.5,0.01),
keep.data = T)
som_model %>% summary()
som_grid <- somgrid(xdim = 6, ydim = 7, topo = "hexagonal")
set.seed(123)
som_model <- som(std_data, grid = som_grid,
rlen = 1000,
alpha = c(0.5,0.1),
#radius = c(0.5,0.01),
keep.data = T)
som_model %>% summary()
plot(som_model, type = "counts")
som_grid <- somgrid(xdim = 7, ydim = 7, topo = "hexagonal")
set.seed(123)
som_model <- som(std_data, grid = som_grid,
rlen = 1000,
alpha = c(0.5,0.1),
#radius = c(0.5,0.01),
keep.data = T)
som_model %>% summary()
plot(som_model, type = "counts")
plot(som_model, type = "quality")
plot(som_model, type = "counts")
plot(som_model, type = "dist.neighbours")
som_grid <- somgrid(xdim = 5, ydim = 5, topo = "hexagonal")
set.seed(123)
som_model <- som(std_data, grid = som_grid,
rlen = 1100,
alpha = c(0.5,0.1),
#radius = c(0.5,0.01),
keep.data = T)
som_model %>% summary()
plot(som_model, type = "counts")
som_grid <- somgrid(xdim = 5, ydim = 5, topo = "hexagonal")
set.seed(123)
som_model <- som(std_data, grid = som_grid,
rlen = 1100,
alpha = c(0.05,0.01),
#radius = c(0.5,0.01),
keep.data = T)
som_model %>% summary()
plot(som_model, type = "counts")
som_grid <- somgrid(xdim = 5, ydim = 5, topo = "hexagonal")
set.seed(123)
som_model <- som(std_data, grid = som_grid,
rlen = 1000,
alpha = c(0.05,0.01),
#radius = c(0.5,0.01),
keep.data = T)
som_model %>% summary()
som_grid <- somgrid(xdim = 5, ydim = 5, topo = "hexagonal")
set.seed(123)
som_model <- som(std_data, grid = som_grid,
rlen = 1500,
alpha = c(0.05,0.01),
#radius = c(0.5,0.01),
keep.data = T)
som_model %>% summary()
som_grid <- somgrid(xdim = 5, ydim = 5, topo = "hexagonal")
set.seed(123)
som_model <- som(std_data, grid = som_grid,
rlen = 1500,
alpha = c(0.5,0.01),
#radius = c(0.5,0.01),
keep.data = T)
som_model %>% summary()
som_grid <- somgrid(xdim = 5, ydim = 5, topo = "hexagonal")
set.seed(123)
som_model <- som(std_data, grid = som_grid,
rlen = 1500,
alpha = c(0.5,0.001),
#radius = c(0.5,0.01),
keep.data = T)
som_model %>% summary()
som_grid <- somgrid(xdim = 5, ydim = 5, topo = "hexagonal")
set.seed(123)
som_model <- som(std_data, grid = som_grid,
rlen = 1500,
alpha = c(0.5,0.01),
#radius = c(0.5,0.01),
keep.data = T)
som_model %>% summary()
plot(som_model, type = "counts")
som_model <- som(std_data, grid = som_grid,
rlen = 1500,
alpha = c(0.25,0.01),
#radius = c(0.5,0.01),
keep.data = T)
som_model %>% summary()
som_grid <- somgrid(xdim = 5, ydim = 5, topo = "hexagonal")
set.seed(123)
som_model <- som(std_data, grid = som_grid,
rlen = 1500,
alpha = c(0.55,0.01),
#radius = c(0.5,0.01),
keep.data = T)
som_model %>% summary()
som_grid <- somgrid(xdim = 5, ydim = 5, topo = "hexagonal")
set.seed(123)
som_model <- som(std_data, grid = som_grid,
rlen = 1500,
alpha = c(0.5,0.01),
#radius = c(0.5,0.01),
keep.data = T)
som_model %>% summary()
som_grid <- somgrid(xdim = 5, ydim = 5, topo = "hexagonal")
set.seed(123)
som_model <- som(std_data, grid = som_grid,
rlen = 2000,
alpha = c(0.55,0.01),
#radius = c(0.5,0.01),
keep.data = T)
som_model %>% summary()
som_grid <- somgrid(xdim = 5, ydim = 5, topo = "hexagonal")
set.seed(123)
som_model <- som(std_data, grid = som_grid,
rlen = 3500,
alpha = c(0.7,0.01),
#radius = c(0.5,0.01),
keep.data = T)
som_model %>% summary()
som_grid <- somgrid(xdim = 5, ydim = 5, topo = "hexagonal")
set.seed(123)
som_model <- som(std_data, grid = som_grid,
rlen = 3500,
alpha = c(0.6,0.01),
#radius = c(0.5,0.01),
keep.data = T)
som_model %>% summary()
som_grid <- somgrid(xdim = 5, ydim = 5, topo = "hexagonal")
set.seed(123)
som_model <- som(std_data, grid = som_grid,
rlen = 2500,
alpha = c(0.6,0.01),
#radius = c(0.5,0.01),
keep.data = T)
som_model %>% summary()
plot(som_model, type = "changes")
plot(som_model, type = "counts")
plot(som_model, type = "codes")
plot(som_model, type = "quality")
plot(som_model, type = "dist.neighbours")
plot(som_model, type = "mapping", labels = lbls$Name, cex = 0.6)
par(mfrow=c(2,2))
for(i in 1:4){
plot(som_model, type = "property", property = temp[,i], main=colnames(std_data)[i])
}
par(mfrow=c(2,2))
for(i in 5:8){
plot(som_model, type = "property", property = temp[,i], main=colnames(std_data)[i])
}
#som_model$distances
som_model %>% summary()
?topo.error
som_model$distances %>% mean()
som_model %>% summary()
?`kohonen-package`
sessionInfo()
plot(som_model, type = "changes")
plot(som_model, type = "counts")
plot(som_model, type = "codes")
plot(som_model, type = "quality")
plot(som_model, type = "dist.neighbours")
plot(som_model, type = "mapping", labels = lbls$Name, cex = 0.6)
par(mfrow=c(2,2))
for(i in 1:4){
plot(som_model, type = "property", property = temp[,i], main=colnames(std_data)[i])
}
par(mfrow=c(2,2))
for(i in 5:8){
plot(som_model, type = "property", property = temp[,i], main=colnames(std_data)[i])
}
#som_model$distances
som_model %>% summary()
som_model$whatmap
som_model$grid
install.packages("https://cran.r-project.org/src/contrib/Archive/kohonen/kohonen_2.0.19.tar.gz", repos=NULL, type="source")
library(kohonen)
?`kohonen-package`
plot(som_model, type = "changes")
plot(som_model, type = "counts")
plot(som_model, type = "codes")
plot(som_model, type = "quality")
plot(som_model, type = "dist.neighbours")
plot(som_model, type = "mapping", labels = lbls$Name, cex = 0.6)
par(mfrow=c(2,2))
for(i in 1:4){
plot(som_model, type = "property", property = temp[,i], main=colnames(std_data)[i])
}
par(mfrow=c(2,2))
for(i in 5:8){
plot(som_model, type = "property", property = temp[,i], main=colnames(std_data)[i])
}
#som_model$distances
som_model %>% summary()
som_model$grid
som_grid <- somgrid(xdim = 5, ydim = 5, topo = "hexagonal")
set.seed(123)
som_model <- som(std_data, grid = som_grid,
rlen = 2500,
alpha = c(0.6,0.01),
#radius = c(0.5,0.01),
keep.data = T)
plot(som_model, type = "changes")
plot(som_model, type = "counts")
plot(som_model, type = "codes")
plot(som_model, type = "quality")
plot(som_model, type = "dist.neighbours")
plot(som_model, type = "mapping", labels = lbls$Name, cex = 0.6)
par(mfrow=c(2,2))
for(i in 1:4){
plot(som_model, type = "property", property = temp[,i], main=colnames(std_data)[i])
}
par(mfrow=c(2,2))
for(i in 5:8){
plot(som_model, type = "property", property = temp[,i], main=colnames(std_data)[i])
}
#som_model$distances
som_model %>% summary()
som_grid <- somgrid(xdim = 5, ydim = 4, topo = "hexagonal")
set.seed(123)
som_model <- som(std_data, grid = som_grid,
rlen = 2500,
alpha = c(0.6,0.01),
#radius = c(0.5,0.01),
keep.data = T)
plot(som_model, type = "changes")
plot(som_model, type = "counts")
plot(som_model, type = "codes")
plot(som_model, type = "quality")
plot(som_model, type = "dist.neighbours")
plot(som_model, type = "mapping", labels = lbls$Name, cex = 0.6)
par(mfrow=c(2,2))
for(i in 1:4){
plot(som_model, type = "property", property = temp[,i], main=colnames(std_data)[i])
}
par(mfrow=c(2,2))
for(i in 5:8){
plot(som_model, type = "property", property = temp[,i], main=colnames(std_data)[i])
}
#som_model$distances
som_model %>% summary()
som_grid <- somgrid(xdim = 4, ydim = 4, topo = "hexagonal")
set.seed(123)
som_model <- som(std_data, grid = som_grid,
rlen = 2500,
alpha = c(0.6,0.01),
#radius = c(0.5,0.01),
keep.data = T)
plot(som_model, type = "changes")
plot(som_model, type = "counts")
plot(som_model, type = "codes")
plot(som_model, type = "quality")
plot(som_model, type = "dist.neighbours")
plot(som_model, type = "mapping", labels = lbls$Name, cex = 0.6)
par(mfrow=c(2,2))
for(i in 1:4){
plot(som_model, type = "property", property = temp[,i], main=colnames(std_data)[i])
}
par(mfrow=c(2,2))
for(i in 5:8){
plot(som_model, type = "property", property = temp[,i], main=colnames(std_data)[i])
}
#som_model$distances
som_model %>% summary()
som_grid <- somgrid(xdim = 4, ydim = 4, topo = "hexagonal")
set.seed(123)
som_model <- som(std_data, grid = som_grid,
rlen = 2500,
alpha = c(0.5,0.01),
#radius = c(0.5,0.01),
keep.data = T)
plot(som_model, type = "changes")
plot(som_model, type = "counts")
plot(som_model, type = "codes")
plot(som_model, type = "quality")
plot(som_model, type = "dist.neighbours")
plot(som_model, type = "mapping", labels = lbls$Name, cex = 0.6)
par(mfrow=c(2,2))
for(i in 1:4){
plot(som_model, type = "property", property = temp[,i], main=colnames(std_data)[i])
}
par(mfrow=c(2,2))
for(i in 5:8){
plot(som_model, type = "property", property = temp[,i], main=colnames(std_data)[i])
}
#som_model$distances
som_model %>% summary()
som_grid <- somgrid(xdim = 5, ydim = 5, topo = "hexagonal")
set.seed(123)
som_model <- som(std_data, grid = som_grid,
rlen = 2500,
alpha = c(0.5,0.01),
#radius = c(0.5,0.01),
keep.data = T)
plot(som_model, type = "changes")
plot(som_model, type = "counts")
plot(som_model, type = "codes")
plot(som_model, type = "quality")
plot(som_model, type = "dist.neighbours")
plot(som_model, type = "mapping", labels = lbls$Name, cex = 0.6)
par(mfrow=c(2,2))
for(i in 1:4){
plot(som_model, type = "property", property = temp[,i], main=colnames(std_data)[i])
}
par(mfrow=c(2,2))
for(i in 5:8){
plot(som_model, type = "property", property = temp[,i], main=colnames(std_data)[i])
}
#som_model$distances
som_model %>% summary()
som_model$unit.classif
som_grid <- somgrid(xdim = 10, ydim = 10, topo = "hexagonal")
set.seed(123)
som_model <- som(std_data, grid = som_grid,
rlen = 2500,
alpha = c(0.5,0.01),
#radius = c(0.5,0.01),
keep.data = T)
plot(som_model, type = "changes")
plot(som_model, type = "counts")
plot(som_model, type = "codes")
plot(som_model, type = "quality")
plot(som_model, type = "dist.neighbours")
plot(som_model, type = "mapping", labels = lbls$Name, cex = 0.6)
par(mfrow=c(2,2))
for(i in 1:4){
plot(som_model, type = "property", property = temp[,i], main=colnames(std_data)[i])
}
par(mfrow=c(2,2))
for(i in 5:8){
plot(som_model, type = "property", property = temp[,i], main=colnames(std_data)[i])
}
#som_model$distances
som_model %>% summary()
plot(som_model, type = "dist.neighbours", palette.name=grey.colors, shape = "straight")
plot(som_model, type = "changes",shape = "straight")
plot(som_model, type = "counts", shape = "straight")
plot(som_model, type = "codes", shape = "straight")
plot(som_model, type = "quality", shape = "straight")
plot(som_model, type = "dist.neighbours", palette.name=grey.colors, shape = "straight")
plot(som_model, type = "mapping", labels = lbls$Name, cex = 0.6, shape = "straight")
par(mfrow=c(2,2))
for(i in 1:4){
plot(som_model, type = "property", property = temp[,i], main=colnames(std_data)[i], shape = "straight")
}
par(mfrow=c(2,2))
for(i in 5:8){
plot(som_model, type = "property", property = temp[,i], main=colnames(std_data)[i], shape = "straight")
}
?unit.distances
som_model$grid
?`kohonen-package`
?unit.distances
unit.distances(som_grid)
som_model %>% summary()
som_model$distances
?unit.distances
(mean(unit.distances(som_grid)) - mean(som_model$distances))/(mean(unit.distances(som_grid)))
som_grid$pts
x <- unit.distances(som_grid)
View(x)
mean(unit.distances(som_grid))
?dist
x <- unit.distances(som_grid)
View(x)
View(x)
dist(std_data)
y <- dist(std_data)
mean(dist(std_data))
mean(som_model$distances)
(mean(unit.distances(som_grid)) - mean(som_model$distances))/(mean(unit.distances(som_grid))) # check preserve topo
(mean(som_model$distances)-mean(dist(std_data)))/(mean(som_model$distances))
mean(som_model$distances)
(mean(dist(std_data))-mean(som_model$distances))/(mean(dist(std_data)))
?apply(array, margin, ...)
som_model$grid
som_model$unit.classif
som_model$unit.classif %>% count()
som_model$unit.classif %>% as_tibble()
som_model$unit.classif %>% as_tibble() %>% count()
som_model$unit.classif %>% as_tibble()$value %>% count()
som_model$unit.classif %>% as_tibble()
som_model$unit.classif %>% as_tibble() %>% mutate(count())
som_model$unit.classif %>% as_tibble() %>% mutate(n = count())
som_model$unit.classif %>% as_tibble() %>% mutate(n = count(value))
som_model$unit.classif %>% as_tibble() %>% group_by()
som_model$unit.classif %>% as_tibble() %>% group_by(value)
som_model$unit.classif %>% as_tibble() %>% group_by(value) %>% count()
hold <- som_model$unit.classif %>% as_tibble() %>% group_by(value) %>% count()
for (i in hold$value) {
print(i)
}
hold$value[-1,]
hold$value[-1]
?daisy
som_model$unit.classif
dist(som_model$unit.classif)
mean(dist(som_model$unit.classif))
daisy(som_model$unit.classif, metric = "manhattan")
daisy(som_model$unit.classif, metric = "euclidean")
hold
tmp <- rep(0,100)
View(temp)
tmp <- rep(0,100) %>% as.matrix()
View(tmp)
tmp <- matrix(nrow = 10,ncol=10)
View(tmp)
?install.packages("SOMbrero")
install.packages("SOMbrero")
library(SOMbrero)
tmp <- trainSOM(std_data, dimension = c(10,10), topo=c("hexagonal"),
radius.type=c("gaussian"), type=c("numeric"),
mode=c("online"), maxit=2500, scaling="none")
tmp <- trainSOM(std_data, dimension = c(10,10), topo=c("square"),
radius.type=c("gaussian"), type=c("numeric"),
mode=c("online"), maxit=2500, scaling="none")
remove.packages("kohonen")
library(kohonen)
remove.packages("kohonen")
.libPaths()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(kohonen)
library(cluster)
library(factoextra)
library(clValid)
library(fpc)
library(cluster)
library(factoextra)
library(clValid)
library(fpc)
data <- read_csv("pokemon/Pokemon.csv")  # load the pokemon dataset
str(data)  # check if all the features are numeric (they're not!) for SOM
no_emerald <- c(283,284,307,308,315,335,337) # these pokemon don't appear in Emerald
mega_id <- data %>%
filter_all(any_vars(str_detect(.,'Mega'))) %>%
select('Name')     # get the Names's of all the 'Mega' pokemon  (not gen 3)
lame_legends <- data %>%
filter(Legendary == T) %>%
filter_all(any_vars(str_detect(.,'Primal'))) %>%
select('Name')     # get Name's of the legendary pokemon, added to a lower Gen - after the fact  (not gen 3)
data <- data %>%
filter(!Name %in% mega_id$Name, !Name %in% lame_legends$Name,
Generation == 3, Legendary == F, !`#` %in% no_emerald) %>%
rename("Type1" = "Type 1", "Type2" = "Type 2", "Sp.Atk" = "Sp. Atk", "Sp.Def" = "Sp. Def") %>%
select(-"#")
data <- data %>%   # change all the type's to numeric values
mutate(Type1 = case_when(Type1 == "Normal" ~ 1,
Type1 == "Fire" ~ 2,
Type1 == "Fighting" ~ 3,
Type1 == "Water" ~ 4,
Type1 == "Flying" ~ 5,
Type1 == "Grass" ~ 6,
Type1 == "Poison" ~ 7,
Type1 == "Electric" ~ 8,
Type1 == "Ground" ~ 9,
Type1 == "Psychic" ~ 10,
Type1 == "Rock" ~ 11,
Type1 == "Ice" ~ 12,
Type1 == "Bug" ~ 13,
Type1 == "Dragon" ~ 14,
Type1 == "Ghost" ~ 15,
Type1 == "Dark" ~ 16,
Type1 == "Steel" ~ 17,
Type1 == "Fairy" ~ 18),
Type2 = case_when(Type2 == "Normal" ~ 1,
Type2 == "Fire" ~ 2,
Type2 == "Fighting" ~ 3,
Type2 == "Water" ~ 4,
Type2 == "Flying" ~ 5,
Type2 == "Grass" ~ 6,
Type2 == "Poison" ~ 7,
Type2 == "Electric" ~ 8,
Type2 == "Ground" ~ 9,
Type2 == "Psychic" ~ 10,
Type2 == "Rock" ~ 11,
Type2 == "Ice" ~ 12,
Type2 == "Bug" ~ 13,
Type2 == "Dragon" ~ 14,
Type2 == "Ghost" ~ 15,
Type2 == "Dark" ~ 16,
Type2 == "Steel" ~ 17,
Type2 == "Fairy" ~ 18,
is.na(Type2) ~ 0))
std_data <- data %>%
select(-"Name", -"Generation", -"Legendary", -"Type2") %>%
scale()
lbls <- data %>% select(Name)
install.packages('https://cran.r-project.org/src/contrib/Archive/kohonen/kohonen_2.0.19.tar.gz', repos=NULL, type="source")
library(kohonen)
?kohonen
?som
?topo.error
remove.packages('kohonen')
